# Task ID: 4
# Title: Implement API Integration Layer
# Status: pending
# Dependencies: 1, 3
# Priority: high
# Description: Create connectors for DataForSEO, SERP, and FireCrawl APIs to fetch keyword data and scrape landing pages
# Details:
1. Create api_integration module with the following components:
   - dataforseo.py: Connector for DataForSEO API
   - serp_api.py: Connector for SERP API
   - firecrawl.py: Connector for FireCrawl API

2. Implement base API client with retry logic using tenacity:
```python
from tenacity import retry, stop_after_attempt, wait_exponential
import requests
import logging

class BaseAPIClient:
    def __init__(self, api_key):
        self.api_key = api_key
        self.session = requests.Session()
    
    @retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10))
    def _make_request(self, method, endpoint, params=None, data=None, headers=None):
        """Make API request with retry logic"""
        try:
            response = self.session.request(
                method=method,
                url=endpoint,
                params=params,
                json=data,
                headers=headers
            )
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            logging.error(f"API request failed: {e}")
            raise
```

3. Implement DataForSEO client for keyword research:
```python
class DataForSEOClient(BaseAPIClient):
    BASE_URL = "https://api.dataforseo.com/v1"
    
    def __init__(self, api_key):
        super().__init__(api_key)
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
    
    def get_keyword_data(self, keywords):
        """Get search volume, CPC, and competition for keywords"""
        endpoint = f"{self.BASE_URL}/keywords_data"
        data = {"keywords": keywords}
        return self._make_request("POST", endpoint, data=data, headers=self.headers)
    
    def expand_keywords(self, seed_keyword):
        """Get keyword suggestions based on seed keyword"""
        endpoint = f"{self.BASE_URL}/keyword_suggestions"
        data = {"keyword": seed_keyword}
        return self._make_request("POST", endpoint, data=data, headers=self.headers)
```

4. Implement similar clients for SERP API and FireCrawl
5. Add batch processing to handle API rate limits
6. Implement caching to avoid redundant API calls

# Test Strategy:
Create mock responses for each API. Test retry logic with simulated failures. Verify correct handling of API rate limits. Test batch processing with large keyword sets. Ensure proper error handling for API-specific error codes. Test caching mechanism to confirm it prevents redundant calls.
