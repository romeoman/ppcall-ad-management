# Task ID: 4
# Title: Implement API Integration Layer
# Status: done
# Dependencies: 1, 3
# Priority: high
# Description: Create connectors for DataForSEO, SERP, and FireCrawl APIs to fetch keyword data and scrape landing pages
# Details:
1. Create api_integration module with the following components:
   - base_client.py: Abstract base API client with async support
   - dataforseo.py: Connector for DataForSEO API with basic auth
   - serp_api.py: Connector for SERP API
   - firecrawl.py: Connector for FireCrawl API

2. Implement async base API client with retry logic:
```python
import aiohttp
import asyncio
from typing import Dict, Any, Optional
import logging
from tenacity import retry, stop_after_attempt, wait_exponential

class BaseAPIClient:
    def __init__(self, max_concurrent: int = 5):
        self.session: Optional[aiohttp.ClientSession] = None
        self.semaphore = asyncio.Semaphore(max_concurrent)
    
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.session.close()
    
    @retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10))
    async def _make_request(self, method: str, url: str, **kwargs) -> Dict[str, Any]:
        async with self.semaphore:
            async with self.session.request(method, url, **kwargs) as response:
                response.raise_for_status()
                return await response.json()
```

3. Implement DataForSEO client with proper authentication:
```python
import base64
from models.api_models import DataForSEORequest, DataForSEOResponse

class DataForSEOClient(BaseAPIClient):
    BASE_URL = "https://api.dataforseo.com/v3"
    
    def __init__(self, login: str, password: str, max_concurrent: int = 5):
        super().__init__(max_concurrent)
        self.auth = aiohttp.BasicAuth(login, password)
    
    async def get_keyword_data(self, request: DataForSEORequest) -> DataForSEOResponse:
        """Get keyword data for Google Ads"""
        endpoint = f"{self.BASE_URL}/keywords_data/google_ads/search_volume/live"
        payload = request.to_api_payload()
        
        response = await self._make_request(
            "POST", 
            endpoint,
            json=payload,
            auth=self.auth
        )
        return DataForSEOResponse(**response)
    
    async def get_keyword_suggestions(self, keyword: str, location: int = 2840):
        """Get keyword suggestions"""
        endpoint = f"{self.BASE_URL}/keywords_data/google_ads/keywords_for_keywords/live"
        payload = [{
            "keywords": [keyword],
            "location_code": location,
            "language_code": "en"
        }]
        
        return await self._make_request(
            "POST",
            endpoint,
            json=payload,
            auth=self.auth
        )
```

4. Implement SERP and FireCrawl clients with API key auth
5. Add rate limiting with asyncio.Semaphore for concurrent requests
6. Implement Redis caching for API responses to avoid redundant calls
7. Use Pydantic models for request/response validation

# Test Strategy:
Follow Test-Driven Development (TDD) approach with pytest:
1. Write failing pytest tests first for each API client component
2. Create pytest fixtures for mock API responses (use pytest-mock and aioresponses)
3. Test async functionality with pytest-asyncio
4. Verify retry logic with simulated failures using pytest fixtures
5. Test rate limiting with concurrent request simulations
6. Mock Redis cache for testing cache hit/miss scenarios
7. Ensure 100% test coverage before marking task complete

Test structure:
- tests/test_api_integration/test_base_client.py - Test base API client with retry logic
- tests/test_api_integration/test_dataforseo.py - Test DataForSEO client with mock responses  
- tests/test_api_integration/test_serp_api.py - Test SERP API client
- tests/test_api_integration/test_firecrawl.py - Test FireCrawl client
- tests/fixtures/api_responses.py - Mock API response fixtures

# Subtasks:
## 1. Refactor DataForSEO for PPC focus with Google Ads and Bing Ads separation [done]
### Dependencies: None
### Description: Restructure DataForSEO implementation to focus on PPC advertising with clear separation between Google Ads and Bing Ads platforms
### Details:
Create dataforseo/ subdirectory with:
- base_dataforseo.py: Shared authentication and base methods
- google_ads_client.py: Google Ads specific endpoints (6 endpoints)
- bing_ads_client.py: Bing Ads specific endpoints (10 endpoints)

Documentation:
- Google Ads API overview: https://dataforseo.com/apis/google-ads-api
- Bing Ads API overview: https://dataforseo.com/apis/bing-ads-api

## 2. Implement Google Ads Search Volume endpoint [done]
### Dependencies: 4.1
### Description: Implement search volume data retrieval for Google Ads keywords with bulk support (up to 1000 keywords)
### Details:
Documentation: https://docs.dataforseo.com/v3/keywords_data/google_ads/search_volume/live/

Returns:
- Search volume (latest monthly searches)
- Competition level (0-1 scale)
- CPC (cost per click)
- Monthly searches history (12 months)
- Low/high top of page bid estimates

TDD Approach:
1. Write tests for bulk keyword processing
2. Test response parsing for monthly history
3. Test error handling for rate limits

## 3. Implement Google Ads Keywords for Site endpoint [done]
### Dependencies: 4.1
### Description: Extract keywords relevant to a specific website or landing page for competitor analysis
### Details:
Documentation: https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_site/live/

Purpose:
- Analyze competitor websites
- Find keywords for landing pages
- Discover untapped keyword opportunities

Parameters:
- target (URL of website)
- location_code
- language_code
- include_branded_keywords
- include_non_branded_keywords

## 4. Implement Google Ads Keywords for Keywords endpoint [done]
### Dependencies: 4.1
### Description: Generate keyword suggestions and related keywords based on seed keywords
### Details:
Documentation: https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_keywords/live/

Purpose:
- Keyword expansion from seed keywords
- Find related and similar keywords
- Discover long-tail variations

Returns:
- Related keywords with metrics
- Search volume for each suggestion
- Competition and CPC data
- Relevance scores

## 5. Implement Google Ads Ad Traffic by Keywords endpoint [done]
### Dependencies: 4.1
### Description: Estimate potential traffic and bid ranges for keywords in Google Ads campaigns
### Details:
Documentation: https://docs.dataforseo.com/v3/keywords_data/google_ads/ad_traffic_by_keywords/live/

Purpose:
- Estimate clicks, impressions, CTR
- Calculate potential ad spend
- Get bid recommendations

Returns:
- Estimated clicks per day
- Estimated impressions
- Average CPC estimates
- Total cost projections
- CTR predictions

## 6. Implement Google Ads Locations and Languages endpoints [done]
### Dependencies: 4.1
### Description: Retrieve supported locations and languages for Google Ads targeting
### Details:
Documentation:
- Locations: https://docs.dataforseo.com/v3/keywords_data/google_ads/locations/
- Languages: https://docs.dataforseo.com/v3/keywords_data/google_ads/languages/

Purpose:
- Get list of supported location codes
- Get list of supported language codes
- Cache results for efficiency

Implementation:
- Cache responses in Redis/memory
- Provide helper methods for lookup
- Include country/region filtering

## 7. Implement Bing Ads Search Volume and Search Volume History endpoints [done]
### Dependencies: 4.1
### Description: Implement Bing search volume data retrieval with historical trends
### Details:
Documentation:
- Search Volume: https://docs.dataforseo.com/v3/keywords_data/bing/search_volume/live/
- Search Volume History: https://docs.dataforseo.com/v3/keywords_data/bing/search_volume_history/live/

Purpose:
- Get current search volume on Bing
- Retrieve historical search trends
- Analyze seasonal patterns

Returns:
- Monthly search volume
- Historical data (12+ months)
- Trend indicators
- Device-specific data

## 8. Implement Bing Ads Keywords for Site and Keywords for Keywords endpoints [done]
### Dependencies: 4.1
### Description: Extract keywords for websites and generate keyword suggestions on Bing
### Details:
Documentation:
- Keywords for Site: https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_site/live/
- Keywords for Keywords: https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_keywords/live/

Purpose:
- Analyze websites for Bing keywords
- Generate Bing-specific keyword suggestions
- Competitor analysis on Bing

Returns:
- Relevant keywords with Bing metrics
- Search volume on Bing
- Bing-specific competition data

## 9. Implement Bing Ads Keyword Performance endpoint [done]
### Dependencies: 4.1
### Description: Get detailed performance metrics for keywords on Bing including device-specific data
### Details:
Documentation: https://docs.dataforseo.com/v3/keywords_data/bing/keyword_performance/live/

Purpose:
- Get device-specific performance (desktop, mobile, tablet)
- Analyze CTR by device type
- Understand user behavior patterns

Returns:
- Click-through rates by device
- Impressions by device
- Position data
- Performance trends
- Device distribution

## 10. Implement Bing Ads Keyword Suggestions for URL endpoint [done]
### Dependencies: 4.1
### Description: Generate AI-powered keyword suggestions based on landing page content analysis
### Details:
Documentation: https://docs.dataforseo.com/v3/keywords_data/bing/keyword_suggestions_for_url/live/

Purpose:
- AI-powered content analysis
- Extract contextual keywords from landing pages
- Automated keyword discovery

Parameters:
- target (URL to analyze)
- language_code
- exclude_brands

Returns:
- Contextually relevant keywords
- Confidence scores
- Content-based suggestions

## 11. Implement Bing Ads Audience Estimation endpoint [done]
### Dependencies: 4.1
### Description: Estimate audience size and demographics for Bing Ads campaigns
### Details:
Documentation: https://docs.dataforseo.com/v3/keywords_data/bing/audience_estimation/live/

Purpose:
- Estimate potential reach
- Get demographic insights
- Plan campaign budgets

Returns:
- Estimated audience size
- Age and gender distribution
- Geographic distribution
- Device usage patterns
- Reach projections

## 12. Implement Bing Ads metadata endpoints (Overview, Locations, Languages) [done]
### Dependencies: 4.1
### Description: Implement Bing Ads metadata retrieval for overview information, supported locations and languages
### Details:
Documentation:
- Overview: https://docs.dataforseo.com/v3/keywords_data/bing/overview/
- Locations: https://docs.dataforseo.com/v3/keywords_data/bing/locations/
- Languages: https://docs.dataforseo.com/v3/keywords_data/bing/languages/

Purpose:
- Get Bing Ads API capabilities overview
- Retrieve supported Bing locations
- Retrieve supported Bing languages
- Cache metadata for efficiency

## 13. Create CLI interface with platform selection [done]
### Dependencies: 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.10, 4.11, 4.12
### Description: Implement command-line interface that allows users to select Google Ads, Bing Ads, or both platforms for keyword operations
### Details:
Requirements:
- Add --platform flag with options: google, bing, both
- Add --endpoint flag to select specific endpoint
- Support bulk processing from CSV files
- Output results in JSON/CSV formats
- Include progress indicators for bulk operations

Example usage:
python cli.py keywords --platform=google --endpoint=search_volume --keywords="marketing,seo" 
python cli.py keywords --platform=both --endpoint=keywords_for_site --url="example.com"
python cli.py keywords --platform=bing --endpoint=audience_estimation --keywords-file="keywords.csv"

