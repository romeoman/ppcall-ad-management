# Task ID: 11
# Title: Implement Project Management System
# Status: done
# Dependencies: 1
# Priority: high
# Description: Create isolated project folder structure with inputs/, configs/, outputs/ subdirectories for campaign reusability
# Details:
Implement a project management system that creates isolated folders for each campaign (e.g., projects/plumbing_campaign/). Each project should be self-contained with its own inputs, configurations, and outputs. This enables easy cloning and recreation of campaigns across different niches without code changes.

# Test Strategy:
Unit tests for folder creation, configuration loading, and project validation. Integration tests for project cloning and updates.

# Subtasks:
## 1. Design project folder structure and architecture [done]
### Dependencies: None
### Description: Define the complete folder hierarchy for campaign projects including inputs/, configs/, outputs/ subdirectories
### Details:
Design a standardized folder structure for each campaign project with clear separation of inputs (seed keywords, locations, categories, competitor URLs), configurations (API settings, campaign parameters), and outputs (generated keywords, ad groups, reports). Document the structure in a specification.

## 2. Create ProjectManager class with core operations [done]
### Dependencies: 11.1
### Description: Implement the main ProjectManager class with methods for project creation, validation, and management
### Details:
Create src/project_manager/project_manager.py with ProjectManager class. Include methods for create_project(), validate_project_structure(), list_projects(), get_project_path(). Use pathlib for cross-platform path handling.

## 3. Implement project configuration management [done]
### Dependencies: 11.2
### Description: Create configuration system for storing and loading project settings
### Details:
Implement ProjectConfig class to manage campaign settings like target platforms (Google/Bing), locations, budget parameters, and API configurations. Store configs as JSON in configs/project_config.json. Include methods for loading, saving, and validating configurations.

## 4. Implement project cloning functionality [done]
### Dependencies: 11.2, 11.3
### Description: Add ability to clone existing projects for new campaigns
### Details:
Implement clone_project() method that copies an existing project structure to a new location, preserving configurations while clearing outputs. Allow selective cloning of inputs and configs. Update project metadata to reflect new campaign name and creation date.

## 5. Create project template system [done]
### Dependencies: 11.2
### Description: Implement template system with sample files for new projects
### Details:
Create template files for common inputs (sample_keywords.txt, sample_locations.csv, sample_categories.csv) and default configuration. Store templates in templates/ directory. Include method to initialize new project from template.

## 6. Write comprehensive unit tests [done]
### Dependencies: 11.2, 11.3, 11.4, 11.5
### Description: Create unit tests for all ProjectManager methods
### Details:
Write pytest unit tests in tests/test_project_manager.py covering project creation, validation, configuration management, cloning, and error handling. Use temporary directories for testing. Mock file operations where appropriate.

