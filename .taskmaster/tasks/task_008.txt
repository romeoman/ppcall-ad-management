# Task ID: 8
# Title: Implement Competition Analysis Module
# Status: pending
# Dependencies: 2, 3
# Priority: medium
# Description: Create module to analyze SpyFu CSV data and identify keyword opportunities and gaps
# Details:
1. Create processors/competition_analyzer.py with the following functionality:

```python
from src.data_models import CompetitorKeyword
import pandas as pd
import logging

class CompetitionAnalyzer:
    def __init__(self):
        pass
    
    def analyze_spyfu_data(self, spyfu_data, user_keywords):
        """Analyze SpyFu competitor data against user keywords"""
        competitor_keywords = []
        user_keyword_terms = [kw.term.lower() for kw in user_keywords]
        
        for item in spyfu_data:
            # Create CompetitorKeyword object
            competitor_kw = CompetitorKeyword(
                term=item['Keyword'],
                volume=item.get('Volume'),
                cpc=item.get('CPC')
            )
            
            # Check for overlap with user keywords
            if competitor_kw.term.lower() in user_keyword_terms:
                competitor_kw.overlap = True
                competitor_kw.recommendation = "Already in your keyword list"
            else:
                # Analyze potential value
                if competitor_kw.volume and competitor_kw.cpc:
                    if competitor_kw.volume > 100 and competitor_kw.cpc > 5.0:
                        competitor_kw.recommendation = "High value - consider adding"
                    elif competitor_kw.volume > 50 and competitor_kw.cpc > 3.0:
                        competitor_kw.recommendation = "Medium value - consider adding"
                    else:
                        competitor_kw.recommendation = "Low value - monitor"
                else:
                    competitor_kw.recommendation = "Insufficient data for recommendation"
            
            competitor_keywords.append(competitor_kw)
        
        return competitor_keywords
    
    def identify_gaps(self, competitor_keywords, user_keywords):
        """Identify keyword gaps and opportunities"""
        # Find high-value keywords not in user list
        opportunities = []
        
        for kw in competitor_keywords:
            if not kw.overlap and "High value" in kw.recommendation:
                opportunities.append(kw)
        
        # Sort by potential value (volume * cpc)
        opportunities.sort(
            key=lambda x: (x.volume or 0) * (x.cpc or 0),
            reverse=True
        )
        
        return opportunities[:100]  # Return top 100 opportunities
    
    def generate_report(self, competitor_keywords, opportunities):
        """Generate competition analysis report"""
        report = {
            'total_competitor_keywords': len(competitor_keywords),
            'overlapping_keywords': sum(1 for kw in competitor_keywords if kw.overlap),
            'opportunities': len(opportunities),
            'top_opportunities': [{
                'term': kw.term,
                'volume': kw.volume,
                'cpc': kw.cpc,
                'estimated_value': (kw.volume or 0) * (kw.cpc or 0)
            } for kw in opportunities[:10]]
        }
        
        return report
```

2. Implement logic to identify high-value competitor keywords
3. Add functionality to detect keyword gaps in user's list
4. Create methods to suggest new keywords based on competitor data
5. Implement export functionality for competition analysis reports

# Test Strategy:
Test analysis with sample SpyFu data. Verify overlap detection works correctly. Test opportunity identification with various threshold values. Ensure report generation includes all required metrics. Test with edge cases like empty inputs and missing data fields.
