# Task ID: 2
# Title: Implement Input Parser Module
# Status: done
# Dependencies: 1
# Priority: high
# Description: Create module to parse and validate user inputs including seed keywords, categories, locations, and SpyFu CSVs
# Details:
1. Create input_parser module with the following components:
   - parse_seed_keywords(file_path): Parse TXT/CSV file with seed keywords
   - parse_categories(file_path): Parse CSV with categories
   - parse_locations(file_path): Parse CSV with cities and zip codes
   - parse_spyfu_data(file_path): Parse SpyFu competition CSV
   - parse_competitor_urls(file_path): Parse TXT list of competitor URLs

2. Use pandas for CSV parsing and implement error handling for malformed inputs

3. Example implementation for parse_seed_keywords:
```python
def parse_seed_keywords(file_path):
    """Parse seed keywords from a CSV or TXT file."""
    if file_path.endswith('.csv'):
        try:
            df = pd.read_csv(file_path)
            # Validate expected columns
            if not all(col in df.columns for col in ['Keyword', 'Category']):
                raise ValueError("CSV must contain 'Keyword' and 'Category' columns")
            return df.to_dict('records')
        except Exception as e:
            logging.error(f"Error parsing seed keywords CSV: {e}")
            raise
    elif file_path.endswith('.txt'):
        try:
            with open(file_path, 'r') as f:
                keywords = [line.strip() for line in f if line.strip()]
            # Assume all keywords are in 'general' category if from TXT
            return [{'Keyword': kw, 'Category': 'general'} for kw in keywords]
        except Exception as e:
            logging.error(f"Error parsing seed keywords TXT: {e}")
            raise
    else:
        raise ValueError("Seed keywords file must be CSV or TXT")
```

# Test Strategy:
Create test files with valid and invalid inputs for each parser function. Test with various file formats (CSV, TXT). Verify error handling for missing files, malformed data, and unexpected columns. Ensure output data structures match expected formats for downstream processing.

# Subtasks:
## 1. Create input_parser module structure [done]
### Dependencies: None
### Description: Create the input_parser package with __init__.py and base structure for parser functions
### Details:
Create src/input_parser/ directory with __init__.py file and set up the module structure for organizing all parsing functions

## 2. Implement seed keywords parser [done]
### Dependencies: None
### Description: Create parse_seed_keywords function to handle TXT and CSV file formats for seed keywords input
### Details:
Implement function that can parse seed keywords from both CSV files (with Keyword and Category columns) and TXT files (one keyword per line). Include proper error handling and logging.

## 3. Implement location and category parsers [done]
### Dependencies: None
### Description: Create functions to parse location CSV files (cities/zip codes) and category CSV files
### Details:
Implement parse_locations() and parse_categories() functions that handle CSV inputs with proper column validation. Locations should include city, state, and zip codes. Categories should include category names and optional descriptions.

## 4. Implement SpyFu and competitor URL parsers [done]
### Dependencies: None
### Description: Create parsers for SpyFu competition CSV data and competitor URLs list
### Details:
Implement parse_spyfu_data() to handle SpyFu CSV exports with keyword performance metrics, and parse_competitor_urls() to read competitor landing page URLs from TXT files. Include validation for expected columns and URL format checking.

## 5. Create unit tests for all parser functions [done]
### Dependencies: None
### Description: Write comprehensive pytest tests for all parser functions with valid and invalid inputs
### Details:
Create test files with sample data, test edge cases, malformed inputs, missing files, and ensure proper error handling. Cover both happy paths and error conditions for each parser function.

